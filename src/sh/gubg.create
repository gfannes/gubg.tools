#!/usr/bin/ruby

require('fileutils')
require('pathname')
require('optparse')

class App
    def initialize()
        parse_cli_args_()
    end

    def call()
        case @what
        when 'class' then create_class_()
        when 'enum' then create_enum_()
        when 'ut' then create_ut_()
        else
            puts(@help_msg)
        end
    end

    private

    def parse_cli_args_()
        OptionParser.new() do |opts|
        	opts.banner = "Usage: gubg.create [what] [options]* [rest]"
            opts.on('-V', '--verbose LEVEL', 'Verbosity level') { |level| @verbose_level = level.to_i() }
            opts.on('-C', '--root FOLDER', 'Root folder') { |folder| @root_dir = folder }
        	opts.on('-f', '--force', 'Forcefully overwrite an already existing file') { @force = true }
        	opts.on('-t', '--template', 'Create template') { @template = true }
        	opts.on('-h', '--header', 'Only create header') { @header = true }

            opts.separator('Verbs:')
            %i[class enum ut].each do |what|
                opts.separator("#{what}\tCreate #{what}")
            end

            opts.separator('Developed by Geert Fannes')

            @help_msg = opts.to_s()
        end.parse!()

        @what = ARGV.shift()
        @args = ARGV
    end

    def create_ut_()
        pop_and_parse_path_(%w[auro gubg], %w[public private protected src])
        raise("Expected base path (#{@base}) to contain 'test'") unless @base.include?('test')

        ext__generator = {}

        ext__generator[:cpp] = ->(fo) do
            fo.puts("#include <#{@rel*'/'}/#{@name}.hpp>")
            fo.puts("#include <doctest.hpp>")
            fo.puts("")
            if !(rel1 = @rel[0..-2]).empty?()
                fo.puts("using namespace #{rel1*'::'};")
            end
            fo.puts("")
            fo.puts("TEST_CASE_FAST(\"XXX tests\", \"#{(@rel+[@name]).map{|e|"[#{e}]"}*''}[XXX]\")")
            fo.puts("{")
            %w[Scn Exp].each do |name|
                fo.puts("    struct #{name}")
                fo.puts("    {")
                fo.puts("    };")
                fo.puts("    #{name} #{name.downcase()};")
                fo.puts("")
            end

            fo.puts("    REQUIRE(false);")
            fo.puts("}")
        end

        generate_files_(suffix: '_tests', **ext__generator)
    end

    def create_enum_()
        pop_and_parse_path_(%w[auro gubg], %w[public private protected src])

        values = @args

        ext__generator = {}

        ext__generator[:hpp] = ->(fo) do
            fo.puts("#ifndef HEADER_#{(@rel+[@name, 'hpp'])*'_'}_ALREAD_INCLUDED")
            fo.puts("#define HEADER_#{(@rel+[@name, 'hpp'])*'_'}_ALREAD_INCLUDED")
            fo.puts("")
            fo.puts("#include <ostream>")
            fo.puts("")
            fo.puts(@rel.map{|e|"namespace #{e} {"}*' ')
            fo.puts("")
            fo.puts("    enum class #{@name}")
            fo.puts("    {")
            values.each do |value|
                fo.puts("        #{value},")
            end
            fo.puts("    };")
            fo.puts("")
            fo.puts("    std::ostream &operator<<(std::ostream &, #{@name});")
            fo.puts("")
            fo.puts("#{'}'*@rel.size()} // namespace #{@rel*'::'}")
            fo.puts("")
            fo.puts("#endif")
        end

        ext__generator[:cpp] = ->(fo) do
            fo.puts("#include <#{@rel*'/'}/#{@name}.hpp>")
            fo.puts("")
            fo.puts(@rel.map{|e|"namespace #{e} {"}*' ')
            fo.puts("")
            fo.puts("    std::ostream &operator<<(std::ostream &os, #{@name} v)")
            fo.puts("    {")
            fo.puts("        switch (v)")
            fo.puts("        {")
            values.each do |value|
                fo.puts("            case #{@name}::#{value}: os << \"#{value}\"; break;")
            end
            fo.puts("            default: os << \"#{@name}-\" << (int)v; break;")
            fo.puts("        }")
            fo.puts("        return os;")
            fo.puts("    }")
            fo.puts("")
            fo.puts("#{'}'*@rel.size()} // namespace #{@rel*'::'}")
        end

        generate_files_(**ext__generator)
    end

    def create_class_()
        pop_and_parse_path_(%w[gubg auro app], %w[public private protected src])

        ext__generator = {}

        ext__generator[:hpp] = ->(fo) do
            fo.puts("#ifndef HEADER_#{(@rel+[@name, 'hpp'])*'_'}_ALREAD_INCLUDED")
            fo.puts("#define HEADER_#{(@rel+[@name, 'hpp'])*'_'}_ALREAD_INCLUDED")
            fo.puts("")
            fo.puts(@rel.map{|e|"namespace #{e} {"}*' ')
            fo.puts("")
            if @template
                fo.puts("    template<typename T>")
            end
            fo.puts("    class #{@name}")
            fo.puts("    {")
            fo.puts("    public:")
            fo.puts("    private:")
            fo.puts("    };")
            fo.puts("")
            fo.puts("#{'}'*@rel.size()} // namespace #{@rel*'::'}")
            fo.puts("")
            fo.puts("#endif")
        end

        if !@template && !@header
            ext__generator[:cpp] = ->(fo) do
                fo.puts("#include <#{@rel*'/'}/#{@name}.hpp>")
                fo.puts("")
                fo.puts(@rel.map{|e|"namespace #{e} {"}*' ')
                fo.puts("")
                fo.puts("")
                fo.puts("#{'}'*@rel.size()} // namespace #{@rel*'::'}")
            end
        end

        generate_files_(**ext__generator)
    end

    # rel_items should be an Array containing strings that indicate the start of 'rel'
    # host_items should be an Array containing strings where 'rel' can start from 
    def pop_and_parse_path_(rel_items, host_items)
        path = @args.shift()
        raise("Could not find path in the args") unless path
        path = path.split('/')

        @base = []
        if @root_dir
            @base = @root_dir.split('/')
        else
            loop do
                raise("Path does not contain #{rel_items} nor #{host_items}") if path.empty?()
                break if rel_items.include?(path[0])
                @base << path.shift()
                break if host_items.include?(@base[-1])
            end
        end

        @rel = []
        @rel << path.shift() while path.size() > 1

        @name = path.shift()
    end

    def generate_files_(suffix: nil, **ext__generator)
        ext__generator.each do |ext, generator|
            folder = File.join(*@base, *@rel)
            FileUtils.mkdir_p(folder)

            fp = (Pathname.new(folder)/"#{@name}#{suffix}").sub_ext(".#{ext}")
            if fp.exist?()
                if @force
                    puts("Warning: removing existing file '#{fp}'")
                    fp.delete()
                else
                    puts("Warning: File #{fp} already exists, I will skip this") 
                    next
                end
            end

            puts("Creating '#{ext}' for '#{@name}' in '#{fp}'")
            File.open(fp, 'w') do |fo|
                generator.(fo)
            end
        end
    end
end

app = App.new()
app.()
