#!/usr/bin/ruby

require('fileutils')

what = ARGV.shift()
args = ARGV

def generate_files(base, rel, name, options:, suffix: nil, **ext__generator)
    ext__generator.each do |ext, generator|
        folder = File.join(*base, *rel)
        FileUtils.mkdir_p(folder)

        fp = File.join(folder, "#{name}#{suffix}.#{ext}")
        if File.exist?(fp)
            if options[:force]
                puts("Warning: removing existing file '#{fp}'")
                FileUtils.rm(fp)
            else
                puts("Warning: File #{fp} already exists, I will skip this") 
                next
            end
        end

        puts("Creating '#{ext}' for '#{name}' in '#{fp}'")
        File.open(fp, 'w') do |fo|
            generator.(fo)
        end
    end
end

case what
when 'class'
    if :pop_and_parse_path
        path = args.shift().split('/')
        base, rel, name = [], [], nil
        base << path.shift() while !%w[auro gubg].include?(path[0])
        rel << path.shift() while path.size() > 1
        name = path.shift()
    end

    options = {force: false, template: false}
    while arg = args.shift()
        arg = arg.to_sym()
        options[arg] = true
    end

    ext__generator = {}

    ext__generator[:hpp] = ->(fo) do
        fo.puts("#ifndef HEADER_#{(rel+[name, 'hpp'])*'_'}_ALREAD_INCLUDED")
        fo.puts("#define HEADER_#{(rel+[name, 'hpp'])*'_'}_ALREAD_INCLUDED")
        fo.puts("")
        fo.puts(rel.map{|e|"namespace #{e} {"}*' ')
        fo.puts("")
        if options[:template]
            fo.puts("    template<typename T>")
        end
        fo.puts("    class #{name}")
        fo.puts("    {")
        fo.puts("    public:")
        fo.puts("    private:")
        fo.puts("    };")
        fo.puts("")
        fo.puts("#{'}'*rel.size()} // namespace #{rel*'::'}")
        fo.puts("")
        fo.puts("#endif")
    end

    if !options[:template]
        ext__generator[:cpp] = ->(fo) do
            fo.puts("#include <#{rel*'/'}/#{name}.hpp>")
            fo.puts("")
            fo.puts(rel.map{|e|"namespace #{e} {"}*' ')
            fo.puts("")
            fo.puts("")
            fo.puts("#{'}'*rel.size()} // namespace #{rel*'::'}")
        end
    end

    generate_files(base, rel, name, options: options, **ext__generator)

when 'enum'
    if :pop_and_parse_path
        path = args.shift().split('/')
        base, rel, name = [], [], nil
        base << path.shift() while !%w[auro gubg].include?(path[0])
        rel << path.shift() while path.size() > 1
        name = path.shift()
    end

    options = {force: false}
    if ix = args.index('force')
        options[:force] = true
        args.delete_at(ix)
    end

    values = args

    ext__generator = {}

    ext__generator[:hpp] = ->(fo) do
        fo.puts("#ifndef HEADER_#{(rel+[name, 'hpp'])*'_'}_ALREAD_INCLUDED")
        fo.puts("#define HEADER_#{(rel+[name, 'hpp'])*'_'}_ALREAD_INCLUDED")
        fo.puts("")
        fo.puts("#include <ostream>")
        fo.puts("")
        fo.puts(rel.map{|e|"namespace #{e} {"}*' ')
        fo.puts("")
        fo.puts("    enum class #{name}")
        fo.puts("    {")
        values.each do |value|
            fo.puts("        #{value},")
        end
        fo.puts("    };")
        fo.puts("")
        fo.puts("    std::ostream &operator<<(std::ostream &, #{name});")
        fo.puts("")
        fo.puts("#{'}'*rel.size()} // namespace #{rel*'::'}")
        fo.puts("")
        fo.puts("#endif")
    end

    ext__generator[:cpp] = ->(fo) do
        fo.puts("#include <#{rel*'/'}/#{name}.hpp>")
        fo.puts("")
        fo.puts(rel.map{|e|"namespace #{e} {"}*' ')
        fo.puts("")
        fo.puts("    std::ostream &operator<<(std::ostream &os, #{name} v)")
        fo.puts("    {")
        fo.puts("        switch (v)")
        fo.puts("        {")
        values.each do |value|
            fo.puts("            case #{name}::#{value}: os << \"#{value}\"; break;")
        end
        fo.puts("            default: os << \"#{name}-\" << (int)v; break;")
        fo.puts("        }")
        fo.puts("        return os;")
        fo.puts("    }")
        fo.puts("")
        fo.puts("#{'}'*rel.size()} // namespace #{rel*'::'}")
    end

    generate_files(base, rel, name, options: options, **ext__generator)

when 'ut'
    if :pop_and_parse_path
        path = args.shift().split('/')
        base, rel, name = [], [], nil
        base << path.shift() while !%w[auro gubg].include?(path[0])
        rel << path.shift() while path.size() > 1
        name = path.shift()
    end
    raise("Expected base path (#{base}) to contain 'test'") unless base.include?('test')

    options = {force: false}
    while arg = args.shift()
        arg = arg.to_sym()
        options[arg] = true
    end

    ext__generator = {}

    ext__generator[:cpp] = ->(fo) do
        fo.puts("#include <#{rel*'/'}/#{name}.hpp>")
        fo.puts("#include <doctest.hpp>")
        fo.puts("")
        if !(rel1 = rel[0..-2]).empty?()
            fo.puts("using namespace #{rel1*'::'};")
        end
        fo.puts("")
        fo.puts("TEST_CASE_FAST(\"XXX tests\", \"#{(rel+[name]).map{|e|"[#{e}]"}*''}\")")
        fo.puts("{")
        %w[Scn Exp].each do |name|
            fo.puts("    struct #{name}")
            fo.puts("    {")
            fo.puts("    };")
            fo.puts("    #{name} #{name.downcase()};")
            fo.puts("")
        end

        fo.puts("    REQUIRE(false);")
        fo.puts("}")
    end

    generate_files(base, rel, name, options: options, suffix: '_tests', **ext__generator)

else raise("Don't know how to create '#{what}'")
end
