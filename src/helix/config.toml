# theme = "darcula-solid"

# LSP type annotations are too visible
# theme = "ayu_dark"

# theme = "amberwood"
# theme = "everblush"
## theme = "sonokai"

theme = "gruvbox_dark_hard"

# Does not tabs in Helix
# theme = "flexoki_dark"

[editor]
auto-save = true
bufferline = "multiple"
soft-wrap.enable = true
lsp.display-inlay-hints = true
# Enables italics over an SSH connection
true-color = true

[editor.cursor-shape]
insert = "bar"
normal = "block"
select = "block"

[editor.statusline]
left = ["mode", "diagnostics"]
center = ["file-name"]
right = ["selections", "file-type", "file-encoding", "position-percentage", "position"]

[keys.normal]
g = { a = "code_action", o = "goto_last_accessed_file" }
ret = ["move_line_down", "goto_first_nonwhitespace"] # Maps the enter key to move to start of next line
D = "delete_char_backward"
minus = { a = ":format", w = ":reflow 130", y = [":insert-output gubg.snippet stream"], o = ["open_below", "normal_mode"], E = ["open_below", ":insert-output gubg.snippet test_case", ":format", "flip_selections", "collapse_selection", "goto_line_end", "move_char_left"], e = ["open_below", ":insert-output gubg.snippet section", ":format", "flip_selections", "collapse_selection", "goto_line_end", "move_char_left"], u = ["open_below", ":insert-output gubg.snippet require", ":format", "flip_selections", "collapse_selection", "goto_line_end", "move_char_left"], U = ["open_below", ":insert-output gubg.snippet require_mss", ":format", "flip_selections", "collapse_selection", "goto_line_end", "move_char_left"], r = ["open_above", ":pipe echo '#include <>'", "goto_line_end",], b = ["open_below", ":pipe echo '{'", "open_below", ":pipe echo '}'", "normal_mode", "move_line_up", ":format"], g = ["open_above", ":pipe echo '#ifndef HEADER_-_ALREADY_INCLUDED'", "open_below", ":pipe echo '#define HEADER_-_ALREADY_INCLUDED'", "open_below", "open_below", "open_below", "open_below", "open_below", ":pipe echo '#endif'", "normal_mode", "goto_file_start", "move_next_word_start", "move_next_word_start", "move_next_word_start", "copy_selection_on_next_line", "change_selection"], s = ["goto_line_end", ":insert-output echo -n 'namespace - { '", "move_line_down", "goto_line_start", ":insert-output echo -n '} '", "normal_mode", "move_line_up", "goto_line_end", "move_prev_word_start", "move_prev_word_start", "trim_selections", "change_selection"], n = ["open_below", ":insert-output gubg.snippet mss_begin_bool", ":format", "flip_selections", "collapse_selection", "goto_line_end", "normal_mode"], N = ["open_below", ":insert-output gubg.snippet mss_begin_RC", ":format", "flip_selections", "collapse_selection", "goto_line_end", "normal_mode"], m = ["open_below", ":insert-output gubg.snippet mss", ":format", "flip_selections", "collapse_selection", "goto_line_end", "move_char_left"], c = ["open_below", ":pipe echo 'class  '", "indent", "open_below", ":pipe echo '{'", "indent", "open_below", ":pipe echo 'public:'", "open_below", ":pipe echo 'private:'", "open_below", ":pipe echo '};'", "move_line_up", "move_line_up", "move_line_up", "move_line_up", "goto_line_end"], C = ["open_below", ":pipe echo 'struct  '", "open_below", ":pipe echo '{'", "open_below", ":pipe echo '};'", "move_line_up", "move_line_up", "goto_line_end"] }
C-q = ":write-quit-all"
C-s = ":write"
C-w = ":buffer-close"
C-t = { space = [":write", ":pipe-to org -t ?", ":reload", "goto_line_end", "move_char_left", "select_textobject_inner"], minus = [":write", ":pipe-to org -s -", ":reload"], t = [":write", ":pipe-to org -s TODO", ":reload"], q = [":write", ":pipe-to org -s QUESTION", ":reload"], a = [":write", ":pipe-to org -s ACTIVE", ":reload"], n = [":write", ":pipe-to org -s NEXT", ":reload"], f = [":write", ":pipe-to org -s FOCUS", ":reload"], c = [":write", ":pipe-to org -s CALLOUT", ":reload"], r = [":write", ":pipe-to org -s REWORK", ":reload"], w = [":write", ":pipe-to org -s WIP", ":reload"], b = [":write", ":pipe-to org -s BLOCKED", ":reload"], x = [":write", ":pipe-to org -s CANCELED", ":reload"], d = [":write", ":pipe-to org -s DONE", ":reload"] }
C-o = { d = ":open %sh{daily}" }
# Limited set of original window mode
C-v = { w = "rotate_view", s = "hsplit", v = "vsplit", q = "wclose", o = "wonly"}
H = ":buffer-previous"
L = ":buffer-next"

[keys.insert]
C-space = "completion"
# Move cursor in insert mode
A-h = "move_char_left"
A-j = "move_line_down"
A-k = "move_line_up"
A-l = "move_char_right"
A-o = "open_below"
A-O = "open_above"
